name: Build Script Catalog

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Configure git identity
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

      - name: "Pre-flight: discover scripts (and fail if zero)"
        run: |
          set -e
          COUNT=$(find ConnectWise-RMM-Asio/Scripts -type f \( -name '*.ps1' -o -name '*.psm1' -o -name '*.py' -o -name '*.sh' \) 2>/dev/null | wc -l | tr -d ' ')
          echo "Pre-flight discovered scripts: $COUNT"
          if [[ "$COUNT" -eq 0 ]]; then
            echo "::error::No scripts discovered under ConnectWise-RMM-Asio/Scripts (expected .ps1/.psm1/.py/.sh)."
            exit 1
          fi

      - name: Record base SHA & create fresh PR branch from latest main
        run: |
          git fetch origin
          BASE_SHA=$(git rev-parse origin/main)
          echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV
          git checkout -B chore/auto-update-catalog "${BASE_SHA}"

      - name: Generate catalog
        run: |
          set -o pipefail
          python3 tools/build_catalog.py | tee build_catalog.log

      - name: "Post-gen: echo discovery count (from generator output)"
        run: |
          if [[ -f build_catalog.log ]]; then
            LINE=$(grep -Eo '\[build_catalog\].*Discovered[[:space:]]+[0-9]+' build_catalog.log | tail -n1 || true)
            if [[ -n "$LINE" ]]; then
              COUNT=$(echo "$LINE" | grep -Eo '[0-9]+' | tail -n1)
              echo "Generator reported discovery count: $COUNT"
              if [[ "$COUNT" -eq 0 ]]; then
                echo "::error::Generator discovered 0 scripts. Failing the job."
                exit 1
              fi
            else
              echo "::warning::No discovery count found in generator output. Proceeding."
            fi
          else
            echo "::warning::build_catalog.log not found; skipping discovery check."
          fi

      - name: Show README diff (if any)
        run: |
          git --no-pager diff -- README.md || true

      - name: Commit changes (if any)
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git add README.md
            git commit -m "chore: auto-update script catalog"
          else
            echo "No README changes at first pass."
          fi

      - name: Anti-drift check (did main move during generation?)
        run: |
          git fetch origin
          NEW_SHA=$(git rev-parse origin/main)
          echo "BASE_SHA=$BASE_SHA  NEW_SHA=$NEW_SHA"
          if [[ "$NEW_SHA" != "$BASE_SHA" ]]; then
            echo "Main advanced during run; resetting branch to NEW_SHA and regenerating."
            git reset --hard "$NEW_SHA"
            python3 tools/build_catalog.py
            if [[ -n "$(git status --porcelain)" ]]; then
              git add README.md
              git commit -m "chore: auto-update script catalog (anti-drift)"
            else
              echo "No README changes after anti-drift regen."
            fi
          fi

      - name: Push PR branch
        run: |
          set -e
          git checkout chore/auto-update-catalog
          if git ls-remote --exit-code --heads origin chore/auto-update-catalog >/dev/null 2>&1; then
            echo "Remote branch exists; pushing updates (force to overwrite drift)."
            git push origin chore/auto-update-catalog --force
          else
            echo "Remote branch does not exist; creating it."
            git push -u origin chore/auto-update-catalog
          fi

      - name: Determine whether PR action is needed
        id: needpr
        run: |
          HAS_COMMITS=false
          if [[ -n "$(git log ${BASE_SHA}..HEAD --oneline 2>/dev/null || true)" ]]; then HAS_COMMITS=true; fi
          HAS_REMOTE=false
          if git ls-remote --exit-code --heads origin chore/auto-update-catalog >/dev/null 2>&1; then HAS_REMOTE=true; fi
          echo "has_commits=${HAS_COMMITS}" >> $GITHUB_OUTPUT
          echo "has_remote=${HAS_REMOTE}" >> $GITHUB_OUTPUT
          echo "has_commits=${HAS_COMMITS}"; echo "has_remote=${HAS_REMOTE}"

      - name: Create or update PR
        if: ${{ steps.needpr.outputs.has_commits == 'true' || steps.needpr.outputs.has_remote == 'true' }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: chore/auto-update-catalog
          base: main
          title: "chore: auto-update script catalog"
          body: "Automated update of the README Generated index."
          commit-message: "chore: auto-update script catalog"
          labels: |
            ci-catalog
            automation
          reviewers: |
            guiltykeyboard
          assignees: |
            guiltykeyboard
          delete-branch: true

      - name: Echo PR link
        if: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          echo "Pull Request URL: https://github.com/${{ github.repository }}/pull/${{ steps.cpr.outputs.pull-request-number }}"

      - name: Enable auto-merge (squash)
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash